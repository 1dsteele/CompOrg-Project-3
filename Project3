#Assume your Howard ID as a decimal integer is X. Let N =26 + (X % 11) where % is the modulo operation, and M = N – 10.
#You will write a MIPS program that reads a string of up to 1000 characters from user input.
#With single comma as the delimiter, split the input string into multiple substrings (with the
#comma removed). If there is no comma in the input, the whole input string is considered a
#substring referred to below.
#For each substring, remove the leading and trailing blank spaces and tab characters if any.
#After that
#If the substring has zero characters or more than 4 characters or has at least one illegal
#character (a character outside the set described below), the program prints a question
#mark "?" as an error message.
#If the substring has only the characters from '0' to '9' and from 'a' to β and from 'A' to
#Δ, the program prints out the number of digits and a slash ‘/’, followed by the unsigned
#decimal integer corresponding to the base-N number represented by the substring. β
#stands for the M-th lower case letter and Δ stands for the M-th upper case letter in the
#English alphabet. In a base-N number, both 'a' and 'A' correspond to the decimal integer
#of 10, both 'b' and 'B' to 11, and so on, and both β and Δ correspond to N – 1.
#o If  there  are  multiple  substrings,  the  numbers  and  the  error  message  should  be
#separated by a single comma.
#Sample test cases (assuming the Howard ID is 12345678):
#02821059 % 11 = 10, therefore the base is 26 + 10 = 36, β is 't' and Δ is 'T'

#Input: 0, 1, 2 Output: 1/0,1/1,1/2
#Input: A,B,C,D Output: 1/10,1/11,1/12,1/13
#Input: 012 Output: 3/32
#Input: 100,200 Output: 3/900,3/1800
#Input: 1023 Output: 4/27063
#Input: A12t,,12345,axyz,a   b,T00a  Output: 4/270989,?,?,?,?,4/783010
#Input: a @ t Output: ?

.data
input: .space 1001
.text

main:                                       # main program starts

li $v0, 8                                   # get input string from the user
la $a0, input
li $a1, 1001
syscall

la $t0, input                               # calls the sub_a function
addi $sp, $sp, -4
sw $t0, 0($sp)
jal sub_a
addi $sp, $sp, 4

j exit

exit:                                       # exit
li $v0, 10
syscall


sub_a:                                      # sub program sub_a starts

lw $s0, 0($sp)                              # the addr of the string
li $s1, 1                                   # flag encountered
li $s6, 0                                   # flag encountered

j sub_a_loop

sub_a_loop:

lb $t0, 0($s0)
li $t1, 44
beq $t0, $t1, commaEncountered

j rebranch_1

rebranch_1:

li $t0, 1

beq $s1, $t0, firstCharTrue                 # if first character true, branch out

j rebranch_2

rebranch_2:
li $s6, 1
addi $s0, $s0, 1

li $t0, 0
li $t1, 10
lb $t2, 0($s0)

seq $t0, $t2, $t0                           # $s4 == NULL
seq $t1, $t2, $t1                           # $s4 == ENTER

or $t0, $t0, $t1                            # $s4 == NULL or $s4 == ENTER
li $t1, 1
bne $t1, $t0 sub_a_loop                     # if not $s4 NULL or ENTER then loop


li $t0, 1
beq $s1, $t0, printInvalidExit

j rebranch_3

rebranch_3:
jr $ra

firstCharTrue:

li $s1, 0

addi $sp, $sp, -4                           # saves space for return addr

sw $ra,  0($sp)                             # saves the return addr in the stack

addi $sp, $sp, -12                          # saves space for storing $s registers


sw $s0, 0($sp)                              # saves the state of all s registers used in the stack
sw $s1, 4($sp)
sw $s6, 8($sp)
addi $sp, $sp, -12                         # passes the addr of the substring to sub_b
sw $s0, 0($sp)                             # saves safe of return values in the stack
jal sub_b
lw $s2, 4($sp)                             # saves the return value
lw $s3, 8($sp)
