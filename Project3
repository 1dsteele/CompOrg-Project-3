#Assume your Howard ID as a decimal integer is X. Let N =26 + (X % 11) where % is the modulo operation, and M = N – 10.
#You will write a MIPS program that reads a string of up to 1000 characters from user input.
#With single comma as the delimiter, split the input string into multiple substrings (with the
#comma removed). If there is no comma in the input, the whole input string is considered a
#substring referred to below.
#For each substring, remove the leading and trailing blank spaces and tab characters if any.
#After that
#If the substring has zero characters or more than 4 characters or has at least one illegal
#character (a character outside the set described below), the program prints a question
#mark "?" as an error message.
#If the substring has only the characters from '0' to '9' and from 'a' to β and from 'A' to
#Δ, the program prints out the number of digits and a slash ‘/’, followed by the unsigned
#decimal integer corresponding to the base-N number represented by the substring. β
#stands for the M-th lower case letter and Δ stands for the M-th upper case letter in the
#English alphabet. In a base-N number, both 'a' and 'A' correspond to the decimal integer
#of 10, both 'b' and 'B' to 11, and so on, and both β and Δ correspond to N – 1.
#o If  there  are  multiple  substrings,  the  numbers  and  the  error  message  should  be
#separated by a single comma.
#Sample test cases (assuming the Howard ID is 12345678):
#02821059 % 11 = 10, therefore the base is 26 + 10 = 36, β is 't' and Δ is 'T'

#Input: 0, 1, 2 Output: 1/0,1/1,1/2
#Input: A,B,C,D Output: 1/10,1/11,1/12,1/13
#Input: 012 Output: 3/32
#Input: 100,200 Output: 3/900,3/1800
#Input: 1023 Output: 4/27063
#Input: A12t,,12345,axyz,a   b,T00a  Output: 4/270989,?,?,?,?,4/783010
#Input: a @ t Output: ?

.data
input: .space 1001
.text

main:                                       # main program starts

li $v0, 8                                   # get input string from the user
la $a0, input
li $a1, 1001
syscall

la $t0, input                               # calls the sub_a function
addi $sp, $sp, -4
sw $t0, 0($sp)
jal sub_a
addi $sp, $sp, 4

j exit

exit:                                       # exit
li $v0, 10
syscall


sub_a:                                      # sub program sub_a starts

lw $s0, 0($sp)                              # the addr of the string
li $s1, 1                                   # flag encountered
li $s6, 0                                   # flag encountered

j sub_a_loop

sub_a_loop:

lb $t0, 0($s0)
li $t1, 44
beq $t0, $t1, commaEncountered

j rebranch_1

rebranch_1:

li $t0, 1

beq $s1, $t0, firstCharTrue                 # if first character true, branch out

j rebranch_2

rebranch_2:
li $s6, 1
addi $s0, $s0, 1

li $t0, 0
li $t1, 10
lb $t2, 0($s0)

seq $t0, $t2, $t0                           # $s4 == NULL
seq $t1, $t2, $t1                           # $s4 == ENTER

or $t0, $t0, $t1                            # $s4 == NULL or $s4 == ENTER
li $t1, 1
bne $t1, $t0 sub_a_loop                     # if not $s4 NULL or ENTER then loop


li $t0, 1
beq $s1, $t0, printInvalidExit

j rebranch_3

rebranch_3:
jr $ra

firstCharTrue:

li $s1, 0

addi $sp, $sp, -4                           # saves space for return addr

sw $ra,  0($sp)                             # saves the return addr in the stack

addi $sp, $sp, -12                          # saves space for storing $s registers


sw $s0, 0($sp)                              # saves the state of all s registers used in the stack
sw $s1, 4($sp)
sw $s6, 8($sp)
addi $sp, $sp, -12                         # passes the addr of the substring to sub_b
sw $s0, 0($sp)                             # saves safe of return values in the stack
jal sub_b
lw $s2, 4($sp)                             # saves the return value
lw $s3, 8($sp)
addi $sp, $sp, 12                          # restore stack to before passing arguments and return values
lw $s0, 0($sp)                             # restore all the s registers to the previous state
lw $s1, 4($sp)
lw $s6, 8($sp)

addi $sp, $sp, 12                          # restore the stack to before saving s registers

lw $ra, 0($sp)                             # restore return addr to $ra

addi $sp, $sp, 4                           # restore the stack to before saving return addr

li $t1, -1                                 # if the function returns -1, then invalid
beq $s2, $t1, printInvalid
slti $t1, $s3, 1                           # if $s1 is less than 1 handle edge case
li $t2, 1
beq $t2, $t1 oneChar

j fixedEdgeCase

fixedEdgeCase:
li $t0, 1                                  # first char encountered, print comma
beq $s6, $t0, printComma

j rebranch_4

rebranch_4:

addi $a0, $s3, 0                           # print the length
li $v0, 1
syscall

li $v0, 11                                 #print backslash
addi $a0, $zero, 47
syscall

addi $a0, $s2, 0                           # print the decimal number
li $v0, 1
syscall

j rebranch_2

printComma:

li $v0, 11                                 #print comma
addi $a0, $zero, 44
syscall

j rebranch_4

printCommaError:

li $v0, 11                                 #print comma
addi $a0, $zero, 44
syscall


j rebranch_5

commaEncountered:

li $t0, 1                                  # checks if previous element is a comma
beq $s1, $t0, printInvalid
li $s1, 1

j rebranch_2

printInvalid:

li $t0, 1                                  # print comma when first char encountered
beq $s6, $t0, printCommaError
j rebranch_5

rebranch_5:

li $v0, 11                                 # print question mark
li $a0, 63
syscall

j rebranch_2

printInvalidExit:

li $v0, 11                                 # print comma
addi $a0, $zero, 44
syscall

li $v0, 11                                 # print question mark
li $a0, 63
syscall



j rebranch_3

oneChar:
li $s3, 1
j fixedEdgeCase

sub_b:                                     # sub program sub_b starts to go through the string and find the addr of string removing spaces

li $s0, 0                                  # flag which is true if first valid char has been encountered
lw $s2, 0($sp)
firstPass:
lb $s4, 0($s2)                             # current char

li $t1, 32                                 # if char is space or tab
li $t2, 9
seq $t3, $s4, $t1                          # $s4=SPACE
seq $t4, $s4, $t2                          # $s4=TAB

or $t1, $t3, $t4                           # $s4=SPACE or $s4=TAB
li $t2, 1

bne $t1, $t2 notSpace                      # if not space or tab go to notSpace

j firstPassCOTD                            # if it is space or tab continue

notSpace:
li $t1, 1
beq $s0, $t1, firstCharEncountered         # if the first non space non tab char encountered store the location and continue
addi $s5, $s2, 0                           # save the address in $s5
li $s0, 1

j firstPassCOTD

firstCharEncountered:
addi $s6, $s2, 0                           # save the addr in $s5
j firstPassCOTD

firstPassCOTD:                             # set the register t2 to point at the next char

addi $s2, 1

lb $s4, 0($s2)                             # current chara
li $t1, 0                                  # increment the counter
li $t2, 10
seq $t3, $s4, $t1                          # $s4 == NULL
seq $t4, $s4, $t2                          # $s4 == ENTER
li $t2, 44
seq $t5, $s4, $t2                          # $s4 == ,

or $t1, $t3, $t4                           # $s4 == NULL or $s4 == ENTER
or $t1, $t5, $t1                           # $s4 == NULL or $s4 == ENTER or $s4 == ,
li $t2, 1
bne $t1, $t2 firstPass                     # if not ($s4 == NULL or $s4 == ENTER or $s4 == ,)then loop

sub $t1, $s6, $s5                          # length of string = end-start +1

addi $t1, $t1, 1

slti $t2, $t1, 5                           # if $t1 is greater than 4 then it is an invalid char, not $t1 less than 5 then it is $t1
nor $t2, $t2, $zero
li $t1, 0xffffffff

beq $t1, $t2, invalidChar                  # length is greater than 4 then it is invalid

sub $t1, $s6, $s5

addi $v1, $t1, 1                           # if valid input then save the length as return value
sw $v1, 8($sp)

addi $s0, $s5, 0                           # addr of the string start
addi $s1, $s6, 0                           # addr of the string end

li $s2, 0                                  # reset all unused registers
li $s4, 0
li $s5, 0
li $s6, 0


li $s3, 0                                  # sum of all numbers, initialize the second pass

j sub_b_loop

sub_b_loop:
beq $s0, $zero, invalidChar
lb $s4, 0($s0)                             # current char
                                           # character falls in the range  '0' to '9'
slti $t0, $s4, 48                          # char < 47

nor $t0, $t0, $zero                        # not (char < 48)  ===> ( char >= 48)

slti $t1, $s4, 58                          # char < 58

and $t0, $t0, $t1
li $t1, 1
beq $t0, $t1, Number                       # if char >= 48 and char < 58

                                           # character falls in the range  'a' to 'y'
slti $t0, $s4, 97                          # char less than 97

nor $t0, $t0, $zero                        # not (char < 97)  ===> ( char  >= 97)

slti $t1, $s4, 122                         # char < 123

and $t0, $t0, $t1
li $t1, 1
beq $t0, $t1, Lower                        # if char >= 97 and char < 123

                                           # character falls in the range  'A' to 'Y'
slti $t0, $s4, 65                          # char < 65

nor $t0, $t0, $zero                        # not (char < 65)  ===> ( char >= 65)

slti $t1, $s4, 90                          # char < 90

and $t0, $t0, $t1
li $t1, 1
beq $t0, $t1, Upper                        # if char >= 65 and char < 90

j invalidChar

Number:

addi $t1, $s4, -48                         # convert ascii into number
li $t2, 36                                 # sum = sum*N = 26 + (X % 11) + cur_number
mult $t2, $s3
mflo $s3
add $s3, $s3, $t1

j sub_b_loopCOTD

Lower:

addi $t1, $s4, -87                         # convert ascii into number
li $t2, 36                                 # sum = sum*N = 26 + (X % 11) + cur_number
mult $t2, $s3
mflo $s3
add $s3, $s3, $t1
